#! /usr/bin/env python

import pkgutil
import rebus.agents
import rebus.buses
from rebus.agent import AgentRegistry
from rebus.bus import BusRegistry, DEFAULT_DOMAIN
import logging
import argparse


def main():
    logging.basicConfig()
    rebus.agents.import_all()
    rebus.buses.import_all()
    buslist = BusRegistry.get_all()

    # pre-parser to preload modules before real argument parser
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("--module", "-m", action="append", default=[])
    modoptions, other = parser.parse_known_args()
    for m in modoptions.module:
        imp = pkgutil.get_loader(m)
        if not imp:
            parser.error("Could not find module [%s]" % m)
        mod = imp.load_module(m)
        if hasattr(mod, "import_all"):
            mod.import_all()

    # bus options
    parser = argparse.ArgumentParser()
    parser.add_argument("--bus", choices=buslist.keys(), default="localbus",
                        help="choose bus")
    parser.add_argument("--busaddr", help="Address of the bus")
    parser.add_argument("--list-agents", action="store_true",
                        help="list available agents")
    parser.add_argument("--domain", "-d", default=DEFAULT_DOMAIN,
                        help="Work in DOMAIN")
    parser.add_argument("--verbose", "-v", action="count", default=0,
                        help="Increase verbosity")
    parser.add_argument("--module", "-m", action="append", default=[])
    parser.add_argument(
        "agents", nargs=argparse.REMAINDER, help="available agents: %s. Use -h"
        " after agent name to see agent's options."
        % ', '.join(AgentRegistry.iterkeys()))
    global_options = parser.parse_args()

    # subparser (agents) options
    # optional subparser options are only supported in python3
    # http://bugs.python.org/issue9253
    # so, we use another parser for agents' options
    parser = argparse.ArgumentParser()
    agent_parser = parser.add_subparsers(dest="agent_name", help="Agents")
    for agent in AgentRegistry.itervalues():
        p = agent_parser.add_parser(agent._name_, help=agent._desc_)
        agent.add_agent_arguments(p)

    if global_options.list_agents:
        for agent in AgentRegistry.itervalues():
            print("{0._name_: <20}: {0._desc_}".format(agent))
        return

    remain = global_options.agents
    remain.append("--")
    #: list of lists of (agent name, options namespace)
    stages = list()
    currentstage = list()
    stages.append(currentstage)
    while remain:
        if remain[0] == "::":
            # new stage
            currentstage = list()
            stages.append(currentstage)
            remain = remain[1:]
            continue
        i = remain.index("--")
        remain, r2 = remain[:i], remain[i:]
        options, remain = parser.parse_known_args(remain)
        remain = remain+r2 if remain else r2[1:]
        if options.agent_name:
            currentstage.append((options.agent_name, options))
            del options.agent_name

    log = logging.getLogger('rebus')
    log.setLevel(max(1, 30-10*global_options.verbose))

    bus_class = BusRegistry.get(global_options.bus)
    bus = bus_class(busaddr=global_options.busaddr)
    for stage in stages:
        log.info("Starting stage %d", stages.index(stage))
        for agent_name, arguments in stage:
            agent_class = AgentRegistry.get(agent_name)
            agent = agent_class(options=arguments, bus=bus,
                                domain=global_options.domain)
        bus.run_agents()


if __name__ == "__main__":
    main()
