#! /usr/bin/env python

import pkgutil
import rebus.agents
import rebus.buses
from rebus.agent import AgentRegistry
from rebus.bus import BusRegistry, DEFAULT_DOMAIN
import logging.handlers
import rebus.tools.daemon
import argparse


class ArgumentOnlyHelpFormatter(
        argparse.ArgumentDefaultsHelpFormatter):
    """
    Formatter for generating usage messages and argument help strings.

    Only displays optional arguments, without header.
    """

    def start_section(self, heading):
        """
        Suppresses section headers
        """
        self._indent()
        section = self._Section(self, self._current_section,
                                heading=argparse.SUPPRESS)
        self._add_item(section.format_help, [])
        self._current_section = section

    def end_section(self):
        self._current_section = self._current_section.parent
        self._dedent()


def main():
    logging.basicConfig()
    rebus.agents.import_all()
    rebus.buses.import_all()
    buslist = BusRegistry.get_all()

    # pre-parser to preload modules before real argument parser
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument(
        "--module", "-m", action="append", default=[],
        help="python module containing agents to load")
    modoptions, other = parser.parse_known_args()
    for m in modoptions.module:
        imp = pkgutil.get_loader(m)
        if not imp:
            parser.error("Could not find module [%s]" % m)
        mod = imp.load_module(m)
        if hasattr(mod, "import_all"):
            mod.import_all()

    #: parser for bus options
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("--list-agents", action="store_true",
                        help="list available agents")
    parser.add_argument("--log-file",
                        help="Send logs to LOG_FILE")
    parser.add_argument("--syslog", action="store_true",
                        help="Send logs to syslog")
    parser.add_argument("--domain", "-d", default=DEFAULT_DOMAIN,
                        help="Work in DOMAIN")
    parser.add_argument("--daemon", "-D", action="store_true",
                        help="run as a daemon; logs go to syslog by default")
    parser.add_argument(
        "--verbose", "-v", action="count", default=0,
        help="Be more verbose (can be used several times).")
    # module added here for help message only, has already been parsed
    parser.add_argument(
        "--module", "-m", action="append", default=[],
        help="python module containing agents to load")
    parser.add_argument(
        "--bus", choices=buslist.keys(), default="localbus",
        help="choose bus (--list-bus-options to list bus options)")
    parser.add_argument(
        "--list-bus-options", help="display bus options", action='store_true')
    parser.add_argument(
        "agents", nargs=argparse.REMAINDER, help="available agents: %s. Use -h"
        " after agent name to see agent's options."
        % ', '.join(AgentRegistry.iterkeys()))
    global_options, remain = parser.parse_known_args()
    # bus options may be in remain (given before --bus) or in options.agents
    bus_agents_args = remain + global_options.agents
    # look for bus options first
    bus_parser = argparse.ArgumentParser(
        usage=argparse.SUPPRESS,
        add_help=False, formatter_class=ArgumentOnlyHelpFormatter)
    BusRegistry.get(global_options.bus).add_arguments(bus_parser)
    bus_options, agent_args = bus_parser.parse_known_args(bus_agents_args)

    # subparser (agents) options
    # optional subparser options are only supported in python3
    # http://bugs.python.org/issue9253
    # so, we use another parser for agents' options
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    agent_parser = parser.add_subparsers(dest="agent_name", help="Agents")
    for agent in AgentRegistry.itervalues():
        p = agent_parser.add_parser(
            agent._name_, help=agent._desc_,
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        agent.add_agent_arguments(p)

    if global_options.list_bus_options:
        print "Bus %s accepts the following options:" % global_options.bus
        print bus_parser.format_help()
        return

    if global_options.list_agents:
        for agent in AgentRegistry.itervalues():
            print("{0._name_: <20}: {0._desc_}".format(agent))
        return

    remain = agent_args
    remain.append("--")
    #: list of lists of (agent name, options namespace)
    stages = list()
    currentstage = list()
    stages.append(currentstage)
    while remain:
        if remain[0] == "::":
            # new stage
            currentstage = list()
            stages.append(currentstage)
            remain = remain[1:]
            continue
        i = remain.index("--")
        remain, r2 = remain[:i], remain[i:]
        options, remain = parser.parse_known_args(remain)
        remain = remain+r2 if remain else r2[1:]
        if options.agent_name:
            currentstage.append((options.agent_name, options))
            del options.agent_name

    log = logging.getLogger('rebus')
    log.setLevel(max(1, 30-10*global_options.verbose))

    if global_options.daemon and not global_options.log_file:
        global_options.syslog = True

    if global_options.log_file or global_options.syslog:
        # remove logging config done by basicConfig()
        for h in logging.root.handlers[:]:
            logging.root.removeHandler(h)
        if global_options.syslog:
            syslog = logging.handlers.SysLogHandler(address="/dev/log")
            formatter = logging.Formatter(
                'REbus agent: %(name)s: %(levelname)s: %(message)s')
            syslog.setFormatter(formatter)
            logging.root.addHandler(syslog)
        if global_options.log_file:
            logfile = logging.FileHandler(global_options.log_file)
            formatter = logging.Formatter(
                '%(asctime)s %(name)s: %(levelname)s: %(message)s')
            logfile.setFormatter(formatter)
            logging.root.addHandler(logfile)

    if global_options.daemon:
        rebus.tools.daemon.daemonize()
        log.info("REbus agent daemonized")

    try:
        bus_class = BusRegistry.get(global_options.bus)
        bus = bus_class(bus_options)
        for stage in stages:
            log.info("Starting stage %d", stages.index(stage))
            for agent_name, arguments in stage:
                agent_class = AgentRegistry.get(agent_name)
                agent = agent_class(options=arguments, bus=bus,
                                    domain=global_options.domain)
            bus.run_agents()
    except Exception as e:
        log.error(e)
        raise


if __name__ == "__main__":
    main()
