#! /usr/bin/env python

import pkgutil
import rebus.agents
import rebus.buses
from rebus.agent import AgentRegistry
from rebus.bus import BusRegistry, DEFAULT_DOMAIN
import logging
import argparse


def main():
    import sys

    logging.basicConfig()
    rebus.agents.import_all()
    rebus.buses.import_all()
    buslist = BusRegistry.get_all()

    # pre-parser to preload modules before real argument parser
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("--module", "-m", action="append", default=[])
    modoptions, other = parser.parse_known_args()
    for m in modoptions.module:
        imp = pkgutil.get_loader(m)
        if not imp:
            parser.error("Could not find module [%s]" % m)
        mod = imp.load_module(m)
        if hasattr(mod, "import_all"):
            mod.import_all()

    # main options
    parser = argparse.ArgumentParser()
    parser.add_argument("--bus", choices=buslist.keys(), default="localbus",
                        help="choose bus")
    parser.add_argument("--busaddr", help="Address of the bus")
    parser.add_argument("--list-agents", action=ListAgents,
                        help="list available agents", nargs=0)
    parser.add_argument("--domain", "-d", default=DEFAULT_DOMAIN,
                        help="Work in DOMAIN")
    parser.add_argument("--verbose", "-v", action="count", default=0,
                        help="Increase verbosity")
    parser.add_argument("--module", "-m", action="append", default=[])

    options, remain = parser.parse_known_args(sys.argv[1:])

    # subparser options
    # optional subparsers are only supported in python3
    # http://bugs.python.org/issue9253
    agent_parser = parser.add_subparsers(dest="agent_name", help="Agents")
    for agent in AgentRegistry.itervalues():
        p = agent_parser.add_parser(agent._name_, help=agent._desc_)
        agent.add_arguments(p)

    remain.append("--")
    #: list of lists of (agent name, options namespace)
    stages = list()
    currentstage = list()
    stages.append(currentstage)
    while remain:
        if remain[0] == "::":
            # new stage
            currentstage = list()
            stages.append(currentstage)
            remain = remain[1:]
            continue
        i = remain.index("--")
        remain, r2 = remain[:i], remain[i:]
        options, remain = parser.parse_known_args(remain)
        remain = remain+r2 if remain else r2[1:]
        if options.agent_name:
            currentstage.append((options.agent_name, options))
            options.agent_name = None

    logging.getLogger().setLevel(max(1, 30-10*options.verbose))

    bus_class = BusRegistry.get(options.bus)
    bus = bus_class(busaddr=options.busaddr)
    for stage in stages:
        for agent_name, arguments in stage:
            agent_class = AgentRegistry.get(agent_name)
            agent = agent_class(bus=bus, domain=options.domain)
            agent.run_in_bus((arguments,))
        bus.busloop()


class ListAgents(argparse.Action):
    def __call__(self, parser, namespace, values=None, option_string=None):
        for agent in AgentRegistry.itervalues():
            print "{0._name_: <20}: {0._desc_}".format(agent)

if __name__ == "__main__":
    main()
