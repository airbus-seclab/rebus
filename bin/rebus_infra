#!/usr/bin/env python

import os
import sys
import argparse
import yaml
import logging.handlers
from collections import namedtuple


def runAgent(agent, verboseLevel, bus, busaddr, agentArgs, modules):
    childPid = os.fork()
    if childPid == 0:
        args = ['rebus_agent']
        args.extend(['-v'] * verboseLevel)
        if (bus is not None):
            args.extend(['--bus', str(bus)])
        if (busaddr is not None):
            args.extend(['--busaddr', str(busaddr)])
        for module in modules:
            args.extend(['-m', module])
        args.append(str(agent))
        if (agentArgs is not None):
            args.extend(agentArgs.split())
        os.execvp('rebus_agent', args)
    return childPid


def runBusMaster(busConfig, busaddr):
    if busConfig.bus == 'localbus':
        return -1
    args = []
    rebusMasterPid = os.fork()
    if rebusMasterPid == 0:
        if busConfig.bus == 'rabbitbus':
            args.append('rebus_master_rabbit')
            if busConfig.addr is not None:
                args.extend(['--rabbitaddr', busConfig.addr])
            if busConfig.heartbeat is not None:
                args.extend(['--heartbeat', busConfig.heartbeat])

        elif busConfig.bus == 'dbus':
            args.append('rebus_master_dbus')

        if busConfig.logfile is not None:
            args.extend(['-f', busConfig.logfile])
        if busConfig.verboseLevel is not None:
            nbv = int(busConfig.verboseLevel)
            args.extend(['-v'] * nbv)
        args.append(busConfig.storage)
        os.execvp(args[0], args)
        raise RuntimeError
    else:
        return rebusMasterPid


def runStage(stageConfig, bus, busaddr, modules):
    agentsPid = []
    for agent in stageConfig['agents']:
        # agents with no parameters - missing ":" at the end of line, fixing it
        if type(agent) is str:
            agent = {agent: {"params": ""}}
        for agentName, args in agent.iteritems():
            if type(args) is dict:
                params = args.get('params', args)
                verboseLevel = int(args.get('verbose_level', 0))
            else:
                params = args
                verboseLevel = 0
            agentsPid.append(runAgent(agentName, verboseLevel, bus, busaddr,
                                      params, modules))
    for pid in agentsPid:
        os.waitpid(pid, 0)


def getBusConfig(config):
    busConfig = namedtuple('busConfig', 'bus logfile verboseLevel storage')
    busConfig.bus = 'localbus'
    busConfig.logfile = None
    busConfig.verboseLevel = None
    busConfig.storage = 'ramstorage'
    busConfig.addr = None
    busConfig.heartbeat = None

    # Bus type
    if 'bus' in config:
        busConfig.bus = config['bus']
        if busConfig.bus not in ('dbus', 'localbus', 'rabbitbus'):
            raise ValueError(busConfig.bus + ' is not a valid bus choice.')

    # Log file path
    if 'logfile' in config:
        busConfig.logfile = config['logfile']

    # Verbose level
    if 'verbose_level' in config:
        if (not isinstance(config['verbose_level'], int) or
                config['verbose_level'] < 0 or
                config['verbose_level'] > 3):
            raise ValueError(str(config['verbose_level']) +
                             ' is not a valid verbose level.')
        busConfig.verboseLevel = str(config['verbose_level'])

    if busConfig.bus == 'rabbitbus':
        if 'addr' in config:
            busConfig.addr = config['addr']
        if 'heartbeat' in config:
            busConfig.heartbeat = str(config['heartbeat'])

    # Storage mode
    if 'storage' in config:
        busConfig.storage = config['storage']
        if busConfig.storage != 'ramstorage' and busConfig.storage !=\
                'diskstorage':
            raise ValueError(busConfig.storage +
                             ' is not a valid storage choice.')
    return busConfig


def appendLocalBusAgentCmd(busConfig, config, agent, args):
    for agent, agentArgs in agent.iteritems():
        args.append(agent)
        if agentArgs is not None:
            args.extend(agentArgs.split())


def appendLocalBusStageCmd(busConfig, config, stage, args):
    for agent in stage['agents'][:-1]:
        appendLocalBusAgentCmd(busConfig, config, agent, args)
        args.append('--')
    appendLocalBusAgentCmd(busConfig, config, stage['agents'][-1], args)


def runLocalBus(busConfig, config, modules):
    childPid = os.fork()
    if childPid == 0:
        args = ['rebus_agent', '--bus', str(busConfig.bus)]
        for module in modules:
            args.extend(['-m', module])
        for stage in config['stages'][:-1]:
            appendLocalBusStageCmd(busConfig, config, stage, args)
            args.extend(['--', '::'])
        appendLocalBusStageCmd(busConfig, config, config['stages'][-1], args)

        os.execvp('rebus_agent', args)
    return childPid


def main():
    logging.basicConfig()
    log = logging.getLogger('rebus_infra')

    # Setup program arguments
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument("config_file", help="The path of the configuration file")
    options = parser.parse_args()
    configFile = options.config_file

    # Load YAML configuration file
    config = yaml.load(file(configFile, 'r'))

    if 'master' not in config:
        log.error('No \"master\" section in ' + str(configFile))
        sys.exit(1)

    if 'agents' not in config:
        log.error('No \"agents\" section in ' + str(configFile))
        sys.exit(1)

    # Get the bus configuration
    try:
        busConfig = getBusConfig(config['master'])
    except ValueError as e:
        log.error(e)
        sys.exit(1)

    # Get the address of the bus
    busaddr = None
    if 'busaddr' in config['agents']:
        busaddr = config['agents']['busaddr']

    # Optional modules
    modules = []
    if 'modules' in config['agents'] and config['agents']['modules'] is not None:
        modules.extend(config['agents']['modules'].split())

    rebusMasterPid = runBusMaster(busConfig, busaddr)
    import time
    time.sleep(0.2)

    # If we use the localbus
    if rebusMasterPid == -1:
        rebusMasterPid = runLocalBus(busConfig, config['agents'], modules)
        signal = os.waitpid(rebusMasterPid, 0)
    else:
        # Run stages (dbus)
        for stageConfig in config['agents']['stages']:
            runStage(stageConfig, busConfig.bus, busaddr, modules)
        signal = os.waitpid(rebusMasterPid, 0)

    sys.exit(0)

if __name__ == "__main__":
    main()
